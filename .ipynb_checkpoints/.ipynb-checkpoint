{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This exercise will require you to pull some data from the Qunadl API. Qaundl is currently the most widely used aggregator of financial market data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a first step, you will need to register a free account on the http://www.quandl.com website."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After you register, you will be provided with a unique API key, that you should store:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Store the API key as a string - according to PEP8, constants are always named in all upper case\n",
    "API_KEY = 'v-tJHS_z7h1zDDVskj6S'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Qaundl has a large number of data sources, but, unfortunately, most of them require a Premium subscription. Still, there are also a good number of free datasets."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this mini project, we will focus on equities data from the Frankfurt Stock Exhange (FSE), which is available for free. We'll try and analyze the stock prices of a company called Carl Zeiss Meditec, which manufactures tools for eye examinations, as well as medical lasers for laser eye surgery: https://www.zeiss.com/meditec/int/home.html. The company is listed under the stock ticker AFX_X."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can find the detailed Quandl API instructions here: https://docs.quandl.com/docs/time-series"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While there is a dedicated Python package for connecting to the Quandl API, we would prefer that you use the *requests* package, which can be easily downloaded using *pip* or *conda*. You can find the documentation for the package here: http://docs.python-requests.org/en/master/ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, apart from the *requests* package, you are encouraged to not use any third party Python packages, such as *pandas*, and instead focus on what's available in the Python Standard Library (the *collections* module might come in handy: https://pymotw.com/3/collections/ ).\n",
    "Also, since you won't have access to DataFrames, you are encouraged to us Python's native data structures - preferably dictionaries, though some questions can also be answered using lists.\n",
    "You can read more on these data structures here: https://docs.python.org/3/tutorial/datastructures.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Keep in mind that the JSON responses you will be getting from the API map almost one-to-one to Python's dictionaries. Unfortunately, they can be very nested, so make sure you read up on indexing dictionaries in the documentation provided above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 355,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First, import the relevant modules\n",
    "import requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 356,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now, call the Quandl API and pull out a small sample of the data (only one day) to get a glimpse\n",
    "# into the JSON structure that will be returned\n",
    "url_example = 'https://www.quandl.com/api/v3/datasets/FSE/EON_X?start_date=2019-04-18&end_date=2019-04-18&api_key=v-tJHS_z7h1zDDVskj6S'\n",
    "r_example = requests.get(url_example)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 357,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id:  36592406\n",
      "dataset_code:  EON_X\n",
      "database_code:  FSE\n",
      "name:  E.on Se (EON_X)\n",
      "description:  Stock Prices for E.on Se (EON) from the Frankfurt Stock Exchange.<br><br>Trading System: Xetra<br><br>ISIN: DE000ENAG999\n",
      "refreshed_at:  2019-04-19T22:30:55.098Z\n",
      "newest_available_date:  2019-04-18\n",
      "oldest_available_date:  2003-01-20\n",
      "column_names:  ['Date', 'Open', 'High', 'Low', 'Close', 'Change', 'Traded Volume', 'Turnover', 'Last Price of the Day', 'Daily Traded Units', 'Daily Turnover']\n",
      "frequency:  daily\n",
      "type:  Time Series\n",
      "premium:  False\n",
      "limit:  None\n",
      "transform:  None\n",
      "column_index:  None\n",
      "start_date:  2019-04-18\n",
      "end_date:  2019-04-18\n",
      "data:  [['2019-04-18', None, 9.841, 9.744, 9.83, None, 8483368.0, 83224703.0, None, None, None]]\n",
      "collapse:  None\n",
      "order:  None\n",
      "database_id:  6129\n"
     ]
    }
   ],
   "source": [
    "# Inspect the JSON structure of the object you created, and take note of how nested it is,\n",
    "# as well as the overall structure\n",
    "json_data_example = r_example.json()\n",
    "for k in json_data_example['dataset'].keys():\n",
    "    print(k + ': ', json_data_example['dataset'][k])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# These are your tasks for this mini project:\n",
    "\n",
    "1. Collect data from the Franfurt Stock Exchange, for the ticker AFX_X, for the whole year 2017 (keep in mind that the date format is YYYY-MM-DD).\n",
    "2. Convert the returned JSON object into a Python dictionary.\n",
    "3. Calculate what the highest and lowest opening prices were for the stock in this period.\n",
    "4. What was the largest change in any one day (based on High and Low price)?\n",
    "5. What was the largest change between any two days (based on Closing Price)?\n",
    "6. What was the average daily trading volume during this year?\n",
    "7. (Optional) What was the median trading volume during this year. (Note: you may need to implement your own function for calculating the median.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 368,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import other relevant modules\n",
    "from collections import defaultdict\n",
    "from scipy import stats\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 369,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now, call the Quandl API and pull out data between 2017-01-01 and 2017-12-31\n",
    "url = 'https://www.quandl.com/api/v3/datasets/FSE/AFX_X?start_date=2017-01-01&end_date=2017-12-31&api_key=v-tJHS_z7h1zDDVskj6S'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 370,
   "metadata": {},
   "outputs": [],
   "source": [
    "#JSON structure\n",
    "r = requests.get(url)\n",
    "json_data = r.json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 371,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using defaultfict to extract data. Take a look at data\n",
    "afx_dict = defaultdict(list)\n",
    "for k in json_data['dataset'].keys():\n",
    "    afx_dict[k].append(json_data['dataset'][k])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 372,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['Date',\n",
       "  'Open',\n",
       "  'High',\n",
       "  'Low',\n",
       "  'Close',\n",
       "  'Change',\n",
       "  'Traded Volume',\n",
       "  'Turnover',\n",
       "  'Last Price of the Day',\n",
       "  'Daily Traded Units',\n",
       "  'Daily Turnover']]"
      ]
     },
     "execution_count": 372,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "afx_dict['column_names']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 377,
   "metadata": {},
   "outputs": [],
   "source": [
    "#3. Calculate what the highest and lowest opening prices were for the stock in this period.\n",
    "date = []\n",
    "open_data = []\n",
    "l = len(afx_dict['data'][0]) #lenght data\n",
    "\n",
    "for k in range(l):\n",
    "    date.append(afx_dict['data'][0][k][0])\n",
    "    open_data.append(afx_dict['data'][0][k][1]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 381,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Higuest opening price: 53.11 in 2017-12-14\n"
     ]
    }
   ],
   "source": [
    "x = np.array(open_data, dtype=np.float64) # we'll working with numpy array to find min and max values\n",
    "max_open = np.nanmax(x)\n",
    "print (\"Higuest opening price: \" + str(max_open) + \" in \" + str(date[open_data.index(max_open)]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lower opening price: 34.0 in 2017-01-24\n"
     ]
    }
   ],
   "source": [
    "min_open = np.nanmin(x)\n",
    "print (\"Lower opening price: \" + str(min_open) + \" in \" + str(date[open_data.index(min_open)]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 382,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Largest change in any one day: 2.8100000000000023 in 2017-05-11\n"
     ]
    }
   ],
   "source": [
    "#4. What was the largest change in any one day (based on High and Low price)?\n",
    "daily_delta = []\n",
    "\n",
    "for k in range(l):\n",
    "    delta = afx_dict['data'][0][k][2] - afx_dict['data'][0][k][3]\n",
    "    daily_delta.append(delta)\n",
    "    \n",
    "max_daily_delta = np.nanmax(daily_delta)    \n",
    "print (\"Largest change in any one day: \" + str(max_daily_delta) + \" in \" + str(date[daily_delta.index(max_daily_delta)]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 383,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Largest change between any two days: 1.7199999999999989 between 2017-05-10 and 2017-05-11\n"
     ]
    }
   ],
   "source": [
    "#5. What was the largest change between any two days (based on Closing Price)?\n",
    "close_delta = []\n",
    "\n",
    "for k in range(0,l-1):\n",
    "    delta = afx_dict['data'][0][k][4] - afx_dict['data'][0][k + 1][4]\n",
    "    close_delta.append(delta)\n",
    "    \n",
    "max_close_delta = np.nanmax(close_delta)\n",
    "print (\"Largest change between any two days: \" + str(max_close_delta) + \" between \" + str(date[close_delta.index(max_close_delta)+1]) + \" and \" + str(date[close_delta.index(max_close_delta)]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#6. What was the average daily trading volume during this year?\n",
    "traded_volume = []\n",
    "for k in range(l):\n",
    "    traded_volume.append(afx_dict['data'][0][k][6])\n",
    "    \n",
    "# As 22 is the number of trading days in a month, we choose a window=22 days:\n",
    "def moving_average(data, windows):\n",
    "    moving_average = []\n",
    "    for k in range(0,l):\n",
    "        if k < windows:\n",
    "            elem = None\n",
    "        else:\n",
    "            elem = np.mean(data[k : k + rolling])\n",
    "        moving_average.append(elem)\n",
    "    return moving_average\n",
    "\n",
    "plt.plot(moving_average(traded_volume, 22), color='black', linewidth=2, linestyle='dashed', label=\"Average Daily Trading Volume\")\n",
    "plt.plot(traded_volume, color='blue', linewidth=1, linestyle='dashed', label= \"Traded Volume\")\n",
    "plt.title('ADV AFX_X 2017')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 405,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average daily trading volume during 2017 is: 84782.11904761905\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#7. (Optional) What was the median trading volume during this year\n",
    "z = np.abs(stats.zscore(traded_volume))\n",
    "\n",
    "def func(data):\n",
    "    clean_data = []\n",
    "    for k in data:\n",
    "        z = (k - np.mean(data))/np.std(data)\n",
    "        if (z < 3) & (z > -3):\n",
    "            clean_data.append(k)\n",
    "    return clean_data\n",
    "\n",
    "def avg(data):\n",
    "    avg = sum(data)/len(data)\n",
    "    return avg\n",
    "\n",
    "filt_traded_volume = func(traded_volume)\n",
    "\n",
    "fig, axes = plt.subplots(1, 2)\n",
    "fig.subplots_adjust(wspace=1)\n",
    "sns.boxplot(x=traded_volume, orient='v' , ax=axes[0])\n",
    "sns.boxplot(x=filt_traded_volume,orient='v',ax=axes[1])\n",
    "\n",
    "print (\"The average daily trading volume during 2017 is: \" + str(avg(filt_traded_volume)))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
